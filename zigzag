char * convert(char * s, int numRows){
    
    int len = strlen(s),
        k = 0;
    char* res = malloc(sizeof(char) * (len + 1));

    if (numRows > 1)
    {
        for (int i = 0; i < len; i += (2 * numRows) - 2)
            res[k++] = s[i];

        for (int row = 2; row < numRows; ++row)
        {
            for (int i = row - 1; i < len; )
            {
                res[k++] = s[i];
                if ((i += ((2 * numRows) - (2 * row))) >= len) break;
                res[k++] = s[i];
                i += ((2 * numRows) - (2 * (numRows - row + 1)));
            }
        }

        for (int i = numRows - 1; i < len; i += (2 * numRows) - 2)
            res[k++] = s[i];

        res[k] = '\0';
    }
    else strcpy(res, s);

    return res;
}

int reverse(int x) {
    long sum = 0;

    while (x != 0) {
        int rem = x % 10;
        sum = sum * 10 + rem;
        x = x / 10;
    }

    // Check for overflow (32-bit signed integer range)
    if (sum > INT_MAX || sum < INT_MIN) {
        return 0;
    }

    return (int)sum;
}

int myAtoi(char* s) {
    
    int count=0,i=0,count1=0,arr[1000];
    while(s[i]==' '){
        i++;
    }
    int si=1;
    if (s[i] == '-' || s[i] == '+') {
        if (s[i + 1] == '-' || s[i + 1] == '+') { // Check for multiple consecutive signs
            return 0;
        }
        si = (s[i] == '-') ? -1 : 1;
        i++;
    }
    long long int num =0;   
    
    while(s[i]>='0'&& s[i]<='9') {
        num = num * 10 + (s[i] - '0');//Chat gpt 

        if (num > INT_MAX && si == 1) {
            return INT_MAX;
        } else if (num > (long long)INT_MAX + 1 && si == -1) {
            return INT_MIN;
        }

        i++;
    }
return num*si;
}
bool isPalindrome(int x) {

     double rev=0, rem, orignal=x;
    
    
        while(x>0)
        {
            rem = x % 10;
            rev = rev * 10 + rem;
            x/=10;
        }

        if(rev == orignal)
            return true;
        
         else
       return false;
    
}

int romanToInt(char* s) {
    int i=0,ans=0;
    while(s[i]!= '\0')

    {   if(s[i] == 'I' && s[i+1] == 'V'){
           ans = ans +  4; i++;}
        else if(s[i] == 'I' && s[i+1] == 'X'){
           ans = ans +  9; i++;}
        else if(s[i] == 'X' && s[i+1] == 'L'){
           ans = ans +  40; i++;}
        else if(s[i] == 'X' && s[i+1] == 'C'){
           ans = ans +  90; i++; }
        else if(s[i] == 'C' && s[i+1] == 'D'){
           ans = ans +  400; i++;}
        else if(s[i] == 'C' && s[i+1] == 'M'){
           ans = ans +  900; i++;}
        else if(s[i] == 'I')
           ans = ans +  1; 
        else if(s[i] == 'V')
           ans = ans + 5; 
        else if(s[i] == 'X')
           ans = ans +  10;
        else if(s[i] == 'L')
           ans = ans +  50;
        else if(s[i] == 'C')
           ans = ans +  100;
        else if(s[i] == 'D')
           ans = ans +  500;
        else if(s[i] == 'M')
           ans = ans +  1000;  

       i++;      
    }
    return ans;
}

char * longestCommonPrefix(char ** str, int size){

    int i,j,flag=0,k=0,min=100000;
    char *s = (char *)malloc(127*sizeof(char));
    strcpy(s,"");
    if(size==0)
        return s;
    char c;
    for(i=0;i<size;i++)
    {
        if(min>strlen(str[i]))
            min = strlen(str[i]);
    }
    for(i=0;i<min;i++,k++)
    {
        c = str[0][i];
        for(j=0;j<size;j++)
        {
            if(str[j][i]!=c)
            {
                flag = 1;
                break;
            }
        }
    //    printf("%d ",flag);
    //    printf("%d ",strlen(str[i]));
        if(flag)
            break;
        else
        {
            s[k] = c;
            s[k+1] = '\0';
        }
int removeDuplicates(int* nums, int numsSize) {
  int c=1;
  for(int i=0;i<numsSize;i++){
    if( nums[i]!=nums[c-1]){
        nums[c]=nums[i];
        c++;
    }
  }
  return c;
}
int removeElement(int* a, int n, int val) {
    int c=0,t;
    for(int i=0;i<n;i++){
        if(a[i]==val){
            c++;
        }
        else{a[i-c]=a[i];}}
        return (n-c);
}
    }
 //   printf("%s",s);
    return s;
}

bool isValid(char* s) {
    int len =strlen(s);
    char stack[len];
    int top = -1;
    for(int i=0;i<len;i++){
        if(s[i]=='(' || s[i] == '{' || s[i] == '[' ){
            stack[++top] = s[i];
        }else{
            if(top == -1 ||( s[i]==')'&&stack[top] != '(')||(s[i]=='}'&&stack[top] != '{')||(s[i]==']'&&stack[top]!='[')){
                return false;
            } 
            top--;
        } 
    }  
    return top == -1; 
}
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode head;
    struct ListNode *h = &head;
    
    if (l1 == NULL && l2 == NULL)
        return NULL;
    
    while (l1 && l2) {
        if (l1->val < l2->val) {
            h->next = l1;
            l1 = l1->next;
            h = h->next;
        } else {
            h->next = l2;
            l2 = l2->next;
            h = h->next;
        }
    }

    if (l1) {
        h->next = l1;
    }
    if (l2) {
        h->next = l2;
    }
  
    return head.next;

}
int strStr(char* haystack, char* needle) {
    int haystack_size = strlen(haystack);
    int needle_size = strlen(needle);
    int result = -1;
    int i = 0;  // haystack
    int j = 0;  // needle

    while (i < (haystack_size) && j < needle_size) {
        if (haystack[i] == needle[j]) {
            i++;
            j++;
        }
        else {
            i = i - j + 1;
            j = 0;
        }
    }

    return result = (j == needle_size) ? (i - needle_size) : -1;
}
int searchInsert(int* nums, int numsSize, int target) {
    int low = 0;
    int high = numsSize - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (nums[mid] == target) {
            return mid; 
        }
        if (nums[mid] < target) {
            low = mid + 1;  
        } else {
            high = mid - 1; 
        }
    }
    
    return low;
}
